#############################################################################
# Makefile for building: GUI
# Generated by qmake (2.01a) (Qt 4.8.1) on: Thu May 12 11:50:49 2016
# Project:  GUI.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile GUI.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++-64 -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -Ilogica -I.
LINK          = g++
LFLAGS        = -m64 -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = gui_main.cpp \
		palestra.cpp \
		nets_list.cpp \
		net_builder_widget.cpp \
		net_trainer_widget.cpp \
		net_runner_widget.cpp \
		data_builder_widget.cpp \
		logica/dag.cpp \
		logica/network.cpp \
		logica/net_container.cpp \
		logica/internetwork.cpp \
		logica/layered_net.cpp \
		logica/layered_biased_net.cpp \
		logica/train.cpp \
		logica/nets.cpp moc_palestra.cpp \
		moc_nets_list.cpp \
		moc_net_builder_widget.cpp \
		moc_net_trainer_widget.cpp \
		moc_net_runner_widget.cpp \
		moc_data_builder_widget.cpp
OBJECTS       = gui_main.o \
		palestra.o \
		nets_list.o \
		net_builder_widget.o \
		net_trainer_widget.o \
		net_runner_widget.o \
		data_builder_widget.o \
		dag.o \
		network.o \
		net_container.o \
		internetwork.o \
		layered_net.o \
		layered_biased_net.o \
		train.o \
		nets.o \
		moc_palestra.o \
		moc_nets_list.o \
		moc_net_builder_widget.o \
		moc_net_trainer_widget.o \
		moc_net_runner_widget.o \
		moc_data_builder_widget.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		GUI.pro
QMAKE_TARGET  = GUI
DESTDIR       = 
TARGET        = GUI

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: GUI.pro  /usr/share/qt4/mkspecs/linux-g++-64/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile GUI.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_phonon.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile GUI.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/GUI1.0.0 || $(MKDIR) .tmp/GUI1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/GUI1.0.0/ && $(COPY_FILE) --parents palestra.h nets_list.h net_builder_widget.h net_trainer_widget.h net_runner_widget.h data_builder_widget.h logica/dag.h logica/network.h logica/net_container.h logica/internetwork.h logica/layered_net.h logica/layered_biased_net.h logica/nets.h .tmp/GUI1.0.0/ && $(COPY_FILE) --parents gui_main.cpp palestra.cpp nets_list.cpp net_builder_widget.cpp net_trainer_widget.cpp net_runner_widget.cpp data_builder_widget.cpp logica/dag.cpp logica/network.cpp logica/net_container.cpp logica/internetwork.cpp logica/layered_net.cpp logica/layered_biased_net.cpp logica/train.cpp logica/nets.cpp .tmp/GUI1.0.0/ && (cd `dirname .tmp/GUI1.0.0` && $(TAR) GUI1.0.0.tar GUI1.0.0 && $(COMPRESS) GUI1.0.0.tar) && $(MOVE) `dirname .tmp/GUI1.0.0`/GUI1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/GUI1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_palestra.cpp moc_nets_list.cpp moc_net_builder_widget.cpp moc_net_trainer_widget.cpp moc_net_runner_widget.cpp moc_data_builder_widget.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_palestra.cpp moc_nets_list.cpp moc_net_builder_widget.cpp moc_net_trainer_widget.cpp moc_net_runner_widget.cpp moc_data_builder_widget.cpp
moc_palestra.cpp: net_builder_widget.h \
		logica/nets.h \
		logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h \
		net_trainer_widget.h \
		net_runner_widget.h \
		data_builder_widget.h \
		nets_list.h \
		palestra.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) palestra.h -o moc_palestra.cpp

moc_nets_list.cpp: nets_list.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) nets_list.h -o moc_nets_list.cpp

moc_net_builder_widget.cpp: logica/nets.h \
		logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h \
		net_builder_widget.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) net_builder_widget.h -o moc_net_builder_widget.cpp

moc_net_trainer_widget.cpp: net_trainer_widget.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) net_trainer_widget.h -o moc_net_trainer_widget.cpp

moc_net_runner_widget.cpp: net_runner_widget.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) net_runner_widget.h -o moc_net_runner_widget.cpp

moc_data_builder_widget.cpp: data_builder_widget.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) data_builder_widget.h -o moc_data_builder_widget.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

gui_main.o: gui_main.cpp palestra.h \
		net_builder_widget.h \
		logica/nets.h \
		logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h \
		net_trainer_widget.h \
		net_runner_widget.h \
		data_builder_widget.h \
		nets_list.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gui_main.o gui_main.cpp

palestra.o: palestra.cpp palestra.h \
		net_builder_widget.h \
		logica/nets.h \
		logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h \
		net_trainer_widget.h \
		net_runner_widget.h \
		data_builder_widget.h \
		nets_list.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o palestra.o palestra.cpp

nets_list.o: nets_list.cpp nets_list.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o nets_list.o nets_list.cpp

net_builder_widget.o: net_builder_widget.cpp net_builder_widget.h \
		logica/nets.h \
		logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o net_builder_widget.o net_builder_widget.cpp

net_trainer_widget.o: net_trainer_widget.cpp net_trainer_widget.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o net_trainer_widget.o net_trainer_widget.cpp

net_runner_widget.o: net_runner_widget.cpp net_runner_widget.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o net_runner_widget.o net_runner_widget.cpp

data_builder_widget.o: data_builder_widget.cpp data_builder_widget.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o data_builder_widget.o data_builder_widget.cpp

dag.o: logica/dag.cpp logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dag.o logica/dag.cpp

network.o: logica/network.cpp logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o network.o logica/network.cpp

net_container.o: logica/net_container.cpp logica/net_container.h \
		logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o net_container.o logica/net_container.cpp

internetwork.o: logica/internetwork.cpp logica/internetwork.h \
		logica/network.h \
		logica/dag.h \
		logica/net_container.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o internetwork.o logica/internetwork.cpp

layered_net.o: logica/layered_net.cpp logica/layered_net.h \
		logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o layered_net.o logica/layered_net.cpp

layered_biased_net.o: logica/layered_biased_net.cpp logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o layered_biased_net.o logica/layered_biased_net.cpp

train.o: logica/train.cpp logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o train.o logica/train.cpp

nets.o: logica/nets.cpp logica/nets.h \
		logica/layered_biased_net.h \
		logica/layered_net.h \
		logica/network.h \
		logica/dag.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o nets.o logica/nets.cpp

moc_palestra.o: moc_palestra.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_palestra.o moc_palestra.cpp

moc_nets_list.o: moc_nets_list.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_nets_list.o moc_nets_list.cpp

moc_net_builder_widget.o: moc_net_builder_widget.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_net_builder_widget.o moc_net_builder_widget.cpp

moc_net_trainer_widget.o: moc_net_trainer_widget.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_net_trainer_widget.o moc_net_trainer_widget.cpp

moc_net_runner_widget.o: moc_net_runner_widget.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_net_runner_widget.o moc_net_runner_widget.cpp

moc_data_builder_widget.o: moc_data_builder_widget.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_data_builder_widget.o moc_data_builder_widget.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

